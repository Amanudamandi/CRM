import React from 'react';
import { memo } from 'react';
import { useState } from 'react';
import { useEffect } from 'react';
import BulkReAssignForm from '../../../Pages/Admin/LeadBoard/LeadReassign/index';
import { employeeLeads } from '../../../Utils/employeeLeadsAPI';
import ReMarketing from '../../../Pages/Admin/LeadBoard/leadReMarketing/ReMarketing';

const Index = ({ pageCount, setIsLoading, employeeAutoGeneratedID, coordinatorAutoGeneratedID, setClicked, boolShowTeamLead = false, boolLeadHandler = true, showCheckBoxes = false, limit = 15, storeFilterData = null, isFilterAppliedClicked, setIsFilterAppliedClicked, isResetFilterBtnClicked, setIsResetFilterBtnClicked, updateLeadBtnClicked, setUpdateLeadBtnClicked, selectAllLeadsChecked }) => {
    const Styles = {
        tableBody: { height: '100%', overflow: 'scroll' },
        employeeValue: { padding: '0.35rem 0rem', paddingRight: '1rem', fontSize: '1rem', textAlign: 'center', fontWeight: '500', whiteSpace: 'nowrap' },
        reAssignBtnContainer: { position: 'absolute', bottom: 60, right: 25, backgroundColor: 'rgba(170, 11, 43, 0.85)', padding: '8px', borderRadius: '5px', cursor: 'pointer' },
        reMarketingBtn: { position: 'absolute', bottom: 110, right: 25, backgroundColor: 'rgba(170, 11, 43, 0.85)', padding: '8px', borderRadius: '5px', cursor: 'pointer' }
    }

    const [leadStatusList, setLeadStatusList] = useState(new Array(limit).fill(false));
    const convertTimeIntoDate = (dateString) => {
        return new Date(dateString);
    }

    const [individualLeads, setIndividualLeads] = useState([]);
    const [showReAssignBtn, setShowReAssignBtn] = useState(false);
    const [reAssignBtnClicked, setReAssignBtnClicked] = useState(false);
    const [reAssignSucces, setReAssignSuccess] = useState(false);
    const [clientsID, setClientsID] = useState([]);

    const [reMarketingBtn, setReMarketingBtn] = useState(false);
    const [reMarketingBtnClicked, setReMarketingBtnClicked] = useState(false);
    const [reMarketingSuccess, setReMarketingSuccess] = useState(false);





    useEffect(() => {
        // console.log("upadetleadBtnClicked PP ", updateLeadBtnClicked);
        // console.log('stoeFilterData PP', storeFilterData);
        let mobile = storeFilterData.Mobile;
        if (mobile) {
            if (mobile[0] === '+') {
                mobile = encodeURIComponent(mobile);
            }
        }
        // console.log(mobile);
        employeeLeads(setIndividualLeads, employeeAutoGeneratedID, coordinatorAutoGeneratedID, pageCount, limit, storeFilterData.startDate, storeFilterData.endDate, storeFilterData.Name, storeFilterData.Email, mobile, storeFilterData.Source, storeFilterData.Stage, storeFilterData.State, storeFilterData.District, storeFilterData['KWP Interested'], storeFilterData.Type, storeFilterData['Lead Handler'], storeFilterData.Coordinator, setIsLoading).then(() => {
            if (isFilterAppliedClicked) {
                setIsFilterAppliedClicked(false);
            }
            if (isResetFilterBtnClicked) {
                setIsResetFilterBtnClicked(false);
            }
            setUpdateLeadBtnClicked(false);
            if (reAssignSucces) {
                setReAssignSuccess(false);
            }
            if (reMarketingSuccess) {
                setReMarketingSuccess(false)
            }
        });

    }, [pageCount, limit, isFilterAppliedClicked, updateLeadBtnClicked, isResetFilterBtnClicked, reAssignSucces, reMarketingSuccess]);


    useEffect(() => {
        const updateFunc = (array, limit, status) => {
            for (let index = 0; index < limit; index++) {
                array[index] = status;
            }
        }
        if (showCheckBoxes) {
            let updateLeadStatusList = [];
            // console.log(limit);
            if (selectAllLeadsChecked) {
                updateFunc(updateLeadStatusList, limit, true);
            }
            else {
                updateFunc(updateLeadStatusList, limit, false);
            }
            setLeadStatusList(updateLeadStatusList);
        }
    }, [selectAllLeadsChecked, limit, showCheckBoxes]);


    const handleChangeLeadStatus = (index) => {
        const updateLeadStatusList = [...leadStatusList];
        updateLeadStatusList[index] = !updateLeadStatusList[index];
        // console.log(updateLeadStatusList);
        setLeadStatusList(updateLeadStatusList);
    }

    useEffect(() => {
        let len = leadStatusList.length;
        let index_2 = 0;
        for (; index_2 < len; index_2++) {
            if (leadStatusList[index_2]) {
                setShowReAssignBtn(true);
                break;
            }
        }
        // console.log(index_2, len);
        if (index_2 === len) {
            setShowReAssignBtn(false);

        }
    }, [leadStatusList]);


    useEffect(() => {
        if (reAssignBtnClicked) {
            let storeClientIDs = [];
            // console.log("leadStatus list : ",leadStatusList);
            for (let index = 0; index < leadStatusList.length; index++) {
                if (leadStatusList[index]) {
                    storeClientIDs.push(individualLeads[index]?._id);
                }
            }
            // console.log("stored client id ",storeClientIDs);
            setClientsID(storeClientIDs);
        }
    }, [reAssignBtnClicked]);








    useEffect(() => {
        const leng = leadStatusList.length;
        let indx = 0
        for (; indx < leng; indx++) {
            if (leadStatusList[indx]) {
                setReMarketingBtn(true);
                break;
            }
        }
        if (indx == leng) {
            setReMarketingBtn(false);
        }
    }, [leadStatusList]);


    useEffect(() => {
        if (reMarketingBtnClicked) {
            let storeClientIDs = [];
            // console.log("leadStatusList : ", leadStatusList);
            for (let index = 0; index < leadStatusList.length; index++) {
                if (leadStatusList[index]) {
                    storeClientIDs.push(individualLeads[index]?._id);
                }
            }
            // console.log("store client id's : ", storeClientIDs);
            setClientsID(storeClientIDs);
        }
    }, [reMarketingBtnClicked]);




    return (
        <tbody style={Styles.tableBody}>
            {
                individualLeads.map(({ _id, empID, TLID, stageID, name,mobile, email, messageStatus, type, stateID, district, followUpDate, visitingDate, revisitDate, city, kwpInterested, source, CurrentDate, stageActivity, AdditonalDetailsID }, index) => (
                    <tr key={_id} style={{ borderBottom: '2px solid #ddd', cursor: 'pointer' }} onClick={() => {
                        setClicked((previousData) => ({ ...previousData, clicked: true, _id, name,mobile, email, messageStatus, type, state: stateID?.state || 'N/A', stageID, district, city, kwpInterested, source, CurrentDate, stageActivity, followUpDate, visitingDate, revisitDate, AdditonalDetailsID }))
                    }} >
                        {showCheckBoxes &&
                            <td style={{ ...Styles.employeeValue, paddingLeft: showCheckBoxes ? '0.8rem' : 0 }} onClick={(event) => event.stopPropagation()}><input type="checkbox" name={_id + index} id={_id + index} onChange={() => handleChangeLeadStatus(index)} checked={leadStatusList[index]} /></td>
                        }

                        <td style={{ ...Styles.employeeValue, paddingLeft: !showCheckBoxes ? '0.3rem' : 0 }}>{stageID ? stageID.stage : 'N/A'}</td>
                        {boolShowTeamLead && <td style={Styles.employeeValue}>{TLID ? TLID.name : 'N/A'}</td>}
                        {boolLeadHandler && <td style={Styles.employeeValue}>{empID ? empID.name : 'N/A'}</td>}
                        <td style={Styles.employeeValue}>{name ? name : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{mobile ? mobile : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{email ? email : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{messageStatus ? "Yes" : 'No'}</td>

                        <td style={Styles.employeeValue}>{stateID ? stateID.state : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{district ? district : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{kwpInterested ? kwpInterested : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{source ? source : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{CurrentDate ? `${convertTimeIntoDate(CurrentDate).getDate()}/${convertTimeIntoDate(CurrentDate).getMonth() + 1}/${convertTimeIntoDate(CurrentDate).getFullYear()}` : '-'}</td>
                        <td style={Styles.employeeValue}>{type ? type === 1 ? 'Hot' : type === 2 ? 'Warm' : 'Cold' : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.ProposalPdf !== null ? (<a href={AdditonalDetailsID?.ProposalPdf} download target='_blank' onClick={(event) => event.stopPropagation()} >Proposal</a>) : "N/A"}</td>

                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.AadharCard != null ? (<a href={AdditonalDetailsID?.AadharCard} download target='_blank' rel='noopener noreferrer' onClick={(event) => event.stopPropagation()}>Aadhar Card</a>) : "N/A"}</td>

                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.PanCard !== null ? (<a href={AdditonalDetailsID?.PanCard} download target='_blank' rel='noopener noreferrer' onClick={(event) => event.stopPropagation()}>PanCard</a>) : "N/A"}</td>

                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.ElectrcityBill !== null ? (<a href={AdditonalDetailsID?.ElectrcityBill} target='_blank' download rel='noopener noreferrer' onClick={(event) => event.stopPropagation()}>ElectricityBill</a>) : "N/A"}</td>

                        {/* <td style={Styles.employeeValue}>{AdditonalDetailsID?.BankAddress!==null ? (<a href={AdditonalDetailsID?.BankAddress} target='_blank'  rel='nooperner noreferrer' onClick={(event) => event.stopPropagation()}> BankDetails</a>) : "N/A"}</td> */}

                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.BankAddress !== null ? <div onClick={(event) => event.stopPropagation()}> Bank Address : {AdditonalDetailsID?.BankAddress} , IFSC Code : {AdditonalDetailsID?.IFSC}, Account Number : {AdditonalDetailsID?.AccountNo}</div> : "N/A"}</td>

                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.CancelCheack !== null ? (<a href={AdditonalDetailsID?.CancelCheack} target='_blank' download rel='nooperner noreferrer' onClick={(event) => event.stopPropagation()}> cancleCheck</a>) : "N/A"}</td>

                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.Dimension !== null ? (<a href={AdditonalDetailsID?.Dimension} download target='_blank' rel='nooperner noreferrer' onClick={(event) => event.stopPropagation()} > Layout</a>) : "N/A"}</td>

                        <td style={Styles.employeeValue}>{AdditonalDetailsID?.Videos !== null ? (<a href={AdditonalDetailsID?.Videos} download target='_blank' rel='nooperner noreferrer' onClick={(event) => event.stopPropagation()} >Video</a>) : 'N/A'}</td>
                        {/* <td style={Styles.employeeValue}>{payment?(<a href={payment} download rel='nooperner noreferrer'>Download payment recipt</a>):"N/A"}</td> */}
                    </tr>
                ))
            }
            {
                showReAssignBtn &&
                <div style={Styles.reAssignBtnContainer} onClick={() => setReAssignBtnClicked(true)}>
                    <span style={{ color: 'white' }}>Re-assign Leads</span>
                </div>
            }
            
            {
                reAssignBtnClicked &&
                <BulkReAssignForm
                    reAssignBtnClicked={reAssignBtnClicked}
                    setReAssignBtnClicked={setReAssignBtnClicked}
                    clientsID={clientsID}
                    setReAssignSuccess={setReAssignSuccess}
                    limit={limit}
                    setLeadStatusList={setLeadStatusList}
                />
            }

            {
                reMarketingBtn &&
                <div style={Styles.reMarketingBtn} onClick={() => setReMarketingBtnClicked(true)}>
                    <span style={{ color: 'white' }}>Re-Marketing Leads</span>
                </div>
            }

            {
                reMarketingBtnClicked && (
                    <ReMarketing
                        reMarketingBtnClicked={reMarketingBtnClicked}
                        setReMarketingBtnClicked={setReMarketingBtnClicked}
                        clientsID={clientsID}
                        setReMarketingSuccess={setReMarketingSuccess}
                        limit={limit}
                        setLeadStatusList={setLeadStatusList}
                    />

                )
            }
        </tbody>
    )
}

export default memo(Index);