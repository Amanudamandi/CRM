import React from 'react';
import { memo } from 'react';
import { useState } from 'react';
import { useEffect } from 'react';
import BulkReAssignDealerForm from '../../../Pages/DLEmployee/leadBoardDL/leadReassign/leadReassign';
// import { employeeLeads } from '../../../Utils/employeeLeadsAPI';
import { employeeDealerLeads } from '../../../Utils/empDealerLeadApi';


const Index = ({ pageCount, setIsLoading, employeeAutoGeneratedID, coordinatorAutoGeneratedID, setClicked, boolShowTeamLead = false, boolLeadHandler = true, showCheckBoxes = false, limit = 15, storeFilterData = null, isFilterAppliedClicked, setIsFilterAppliedClicked, isResetFilterBtnClicked, setIsResetFilterBtnClicked, updateLeadBtnClicked, setUpdateLeadBtnClicked, selectAllLeadsChecked }) => {
    const Styles = {
        tableBody: { height: '100%', overflow: 'scroll' },
        employeeValue: { padding: '0.35rem 0rem', paddingRight: '1rem', fontSize: '1rem', textAlign: 'center', fontWeight: '500', whiteSpace: 'nowrap' },
        reAssignBtnContainer: { position: 'absolute', bottom: 50, right: 25, backgroundColor: 'rgba(170, 11, 43, 0.85)', padding: '8px', borderRadius: '5px', cursor: 'pointer' },
    }

    const [leadStatusList, setLeadStatusList] = useState(new Array(limit).fill(false));
    const convertTimeIntoDate = (dateString) => {
        return new Date(dateString);
    }

    const [individualLeads, setIndividualLeads] = useState([]);
    const [showReAssignBtn, setShowReAssignBtn] = useState(false);
    const [reAssignBtnClicked, setReAssignBtnClicked] = useState(false);
    const [reAssignSucces, setReAssignSuccess] = useState(false);
    const [clientsID, setClientsID] = useState([]);

    useEffect(() => {
        // console.log("upadetleadBtnClicked DL", updateLeadBtnClicked);
        // console.log('storeFilterData DL', storeFilterData);
        let mobile = storeFilterData.Mobile;
        if (mobile) {
            if (mobile[0] === '+') {
                mobile = encodeURIComponent(mobile);
            }
        }
        // console.log("it give total mobile no in a page",mobile);
        
        // console.log("filter Data Store : ",storeFilterData)

        employeeDealerLeads(setIndividualLeads, employeeAutoGeneratedID, coordinatorAutoGeneratedID, pageCount, limit, storeFilterData.startDate, storeFilterData.endDate, storeFilterData.Name, storeFilterData.Email, mobile, storeFilterData.Source, storeFilterData.Stage, storeFilterData.State, storeFilterData.District, storeFilterData['KWP Interested'], storeFilterData.Type, storeFilterData['Lead Handler'], storeFilterData.Coordinator, storeFilterData.Document,storeFilterData.remark,setIsLoading).then(() => {
            if (isFilterAppliedClicked) {
                setIsFilterAppliedClicked(false);
            }
            if (isResetFilterBtnClicked) {
                setIsResetFilterBtnClicked(false);
            }
            setUpdateLeadBtnClicked(false);
            if (reAssignSucces) {
                setReAssignSuccess(false);
            }
        });

    }, [pageCount, limit, isFilterAppliedClicked, updateLeadBtnClicked, isResetFilterBtnClicked, reAssignSucces]);


    useEffect(() => {
        const updateFunc = (array, limit, status) => {
            for (let index = 0; index < limit; index++) {
                array[index] = status;
            }
            // console.log("array status ",array); // it check the lead is check or not if lead check it show true otherwise false
        }
        if (showCheckBoxes) {
            let updateLeadStatusList = [];
            // console.log(limit);
            if (selectAllLeadsChecked) {
                updateFunc(updateLeadStatusList, limit, true);
            }
            else {
                updateFunc(updateLeadStatusList, limit, false);
            }
            setLeadStatusList(updateLeadStatusList);
        }
    }, [selectAllLeadsChecked, limit, showCheckBoxes]);


    const handleChangeLeadStatus = (index) => {
        const updateLeadStatusList = [...leadStatusList];
        // console.log("before updateleadStatusList ",updateLeadStatusList)
        updateLeadStatusList[index] = !updateLeadStatusList[index];
        // console.log("updatedLeadStatusList",updateLeadStatusList);
        setLeadStatusList(updateLeadStatusList);
    }

    useEffect(() => {
        let len = leadStatusList.length;
        let index_2 = 0;
        for (; index_2 < len; index_2++) {
            if (leadStatusList[index_2]) {
                setShowReAssignBtn(true);
                break;
            }
        }
        console.log(index_2, len);
        if (index_2 === len) {
            setShowReAssignBtn(false);
        }
    }, [leadStatusList]);


    useEffect(() => {
        if (reAssignBtnClicked) {
            let storeClientIDs = [];
            // console.log(leadStatusList);
            for (let index = 0; index < leadStatusList.length; index++) {
                if (leadStatusList[index]) {
                    storeClientIDs.push(individualLeads[index]?._id);
                }
            }
            // console.log(storeClientIDs);
            setClientsID(storeClientIDs);
        }
    }, [reAssignBtnClicked]);

    // individualLeads.map((items) => {
    //     console.log("items: ", items);
    // })

    return (
        <tbody style={Styles.tableBody}>
            {/* {individualLeads.map((items)=>(
                console.log("lead data :",items)
            ))} */}
            {
                individualLeads.map(({ _id, empID, TLID, stageID, name, email, type, mobile, stateID, district, followUpDate, visitingDate, revisitDate, city, kwpInterested, source, CurrentDate, stageActivity, interstedIn, Document, remark }, index) => (
                    <tr key={_id} style={{ borderBottom: '2px solid #ddd', cursor: 'pointer' }} onClick={() => {
                        setClicked((previousData) => ({ ...previousData, clicked: true, _id, name, email, mobile, type, state: stateID?.state || 'N/A', stageID, district, city, kwpInterested, source, CurrentDate, stageActivity, followUpDate, visitingDate, revisitDate, interstedIn, Document, remark }))
                    }} >
                        {showCheckBoxes &&
                            <td style={{ ...Styles.employeeValue, paddingLeft: showCheckBoxes ? '0.8rem' : 0 }} onClick={(event) => event.stopPropagation()}><input type="checkbox" name={_id + index} id={_id + index} onChange={() => handleChangeLeadStatus(index)} checked={leadStatusList[index]} /></td>
                        }

                        <td style={{ ...Styles.employeeValue, paddingLeft: !showCheckBoxes ? '0.3rem' : 0 }}>{stageID ? stageID.stage : 'N/A'}</td>

                        {boolShowTeamLead && <td style={Styles.employeeValue}>{TLID ? TLID.name : 'N/A'}</td>}
                        {boolLeadHandler && <td style={Styles.employeeValue}>{empID ? empID.name : 'N/A'}</td>}
                        {/*                         
                        <td style={Styles.employeeValue}>{TLID ? TLID?.name : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{empID ? empID?.name : 'N/A'}</td> */}

                        <td style={Styles.employeeValue}>{name ? name : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{mobile ? mobile : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{email ? email : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{type ? (type === 1 ? 'Hot' : type === 2 ? 'Warm' : 'Cold') : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{stateID ? stateID?.state : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{district ? district : 'N/A'}</td>
                        <td style={Styles.employeeValue}>{source ? source : 'N/A'}</td>
                        <td style={Styles.employeeValue}>
                            {CurrentDate ?
                                `${convertTimeIntoDate(CurrentDate).getDate()}/${convertTimeIntoDate(CurrentDate).getMonth() + 1}/${convertTimeIntoDate(CurrentDate).getFullYear()}`
                                : '-'}
                        </td>
                        <td style={Styles.employeeValue}>{interstedIn ? interstedIn : 'N/A'}</td>
                        {/* <td style={Styles.employeeValue}>{lead?.Document ? lead?.Document : 'N/A'}</td> */}
                        <td style={Styles.employeeValue}>{Document !== null ? (
                            <a href={Document} download target='_blank' rel='noopener noreferrer ' onClick={(event) => (event.stopPropagation())}>Proposal</a>
                        ) : 'N/A'}</td>
                        <td style={Styles.employeeValue} > {remark ? remark : "N/A"}</td>
                    </tr>
                ))
            }
            {
                showReAssignBtn &&
                <div style={Styles.reAssignBtnContainer} onClick={() => setReAssignBtnClicked(true)}>
                    <span style={{ color: 'white' }}>Re-assign Leads</span>
                </div>
            }
            {
                reAssignBtnClicked &&
                <BulkReAssignDealerForm
                    reAssignBtnClicked={reAssignBtnClicked}
                    setReAssignBtnClicked={setReAssignBtnClicked}
                    clientsID={clientsID}
                    setReAssignSuccess={setReAssignSuccess}
                    limit={limit}
                    setLeadStatusList={setLeadStatusList}
                />
            }
        </tbody>
    )
}

export default memo(Index);